// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NATSInternal.Services;

#nullable disable

namespace NATSInternal.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("login_providers");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("provider_key");

                    b.HasKey("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("content");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<DateTime>("EndingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ending_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("starting_datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("announcements", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.AnnouncementReadUser", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int")
                        .HasColumnName("announcement_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("AnnouncementId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("announcement_read_users", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SocialMediaUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("social_media_url");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__brands__name");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Consultant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__consultants__is_deleted");

                    b.ToTable("consultants", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ConsultantUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultantId")
                        .HasColumnType("int")
                        .HasColumnName("consultant_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__consultant_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("consultant_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("UX__countries__code");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__countries__name");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fullname");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int?>("IntroducerId")
                        .HasColumnType("int")
                        .HasColumnName("introducer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NickName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("nickname");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_full_name");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("ZaloNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zalo_number");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("IntroducerId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DailyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ConsultantGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("consultant_gross_revenue");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<long>("DebtAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_amount");

                    b.Property<long>("DebtPaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_paid_amount");

                    b.Property<long>("EquipmentExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_expenses");

                    b.Property<int>("MonthlyStatsId")
                        .HasColumnType("int")
                        .HasColumnName("monthly_stats_id");

                    b.Property<long>("OfficeExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("office_expense");

                    b.Property<DateTime?>("OfficiallyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("officially_closed_datetime");

                    b.Property<DateOnly>("RecordedDate")
                        .HasColumnType("date")
                        .HasColumnName("recorded_date");

                    b.Property<long>("RetailGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("retail_gross_revenue");

                    b.Property<long>("ShipmentCost")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_cost");

                    b.Property<long>("StaffExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_expense");

                    b.Property<long>("SupplyCost")
                        .HasColumnType("bigint")
                        .HasColumnName("supply_cost");

                    b.Property<DateTime?>("TemporarilyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("temporarily_closed_datetime");

                    b.Property<long>("TreatmentGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("treatment_gross_revenue");

                    b.Property<long>("UtilitiesExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("utilities_expenses");

                    b.Property<long>("VatCollectedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_collected_amount");

                    b.HasKey("Id");

                    b.HasIndex("MonthlyStatsId");

                    b.HasIndex("RecordedDate")
                        .IsUnique()
                        .HasDatabaseName("UX__daily_stats__recorded_date");

                    b.ToTable("daily_stats", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Debt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("IncurredDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("incurred_datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDateTime")
                        .HasDatabaseName("IX__debts__incurred_datetime");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__debts__is_deleted");

                    b.ToTable("debts", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__debt_payments__is_deleted");

                    b.HasIndex("PaidDateTime")
                        .HasDatabaseName("IX__debt_payments__paid_datetime");

                    b.ToTable("debt_payments", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtPaymentUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DebtPaymentId")
                        .HasColumnType("int")
                        .HasColumnName("debt_payment_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DebtPaymentId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__debt_payment_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("debt_payment_update_history", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DebtId")
                        .HasColumnType("int")
                        .HasColumnName("debt_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("DebtId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__debt_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("debt_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<int>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("payee_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PayeeId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePayee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__expense_payees__name");

                    b.ToTable("expenses_payees", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__expense_photos__url");

                    b.ToTable("expense_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpenseUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__expense_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("expense_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.MonthlyStats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ConsultantGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("consultant_gross_revenue");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<long>("DebtAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_amount");

                    b.Property<long>("DebtPaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("debt_paid_amount");

                    b.Property<long>("EquipmentExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("equipment_expenses");

                    b.Property<long>("OfficeExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("office_expense");

                    b.Property<DateTime?>("OfficiallyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("officially_closed_datetime");

                    b.Property<int>("RecordedMonth")
                        .HasColumnType("int")
                        .HasColumnName("recorded_month");

                    b.Property<int>("RecordedYear")
                        .HasColumnType("int")
                        .HasColumnName("recoreded_year");

                    b.Property<long>("RetailGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("retail_gross_revenue");

                    b.Property<long>("ShipmentCost")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_cost");

                    b.Property<long>("StaffExpense")
                        .HasColumnType("bigint")
                        .HasColumnName("staff_expense");

                    b.Property<long>("SupplyCost")
                        .HasColumnType("bigint")
                        .HasColumnName("supply_cost");

                    b.Property<DateTime?>("TemporarilyClosedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("temporarily_closed_datetime");

                    b.Property<long>("TreatmentGrossRevenue")
                        .HasColumnType("bigint")
                        .HasColumnName("treatment_gross_revenue");

                    b.Property<long>("UtilitiesExpenses")
                        .HasColumnType("bigint")
                        .HasColumnName("utilities_expenses");

                    b.Property<long>("VatCollectedAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("vat_collected_amount");

                    b.HasKey("Id");

                    b.HasIndex("RecordedMonth", "RecordedYear")
                        .IsUnique()
                        .HasDatabaseName("UX_monthly_stats__recorded_month__recorded_year");

                    b.ToTable("monthly_stats", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("datetime");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("notification_type");

                    b.HasKey("Id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.NotificationReadUser", b =>
                {
                    b.Property<int>("ReadNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("read_notification_id");

                    b.Property<int>("ReadUserId")
                        .HasColumnType("int")
                        .HasColumnName("read_user_id");

                    b.HasKey("ReadNotificationId", "ReadUserId");

                    b.HasIndex("ReadUserId");

                    b.ToTable("notification_read_users", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.NotificationReceivedUser", b =>
                {
                    b.Property<int>("ReceivedNotificationId")
                        .HasColumnType("int")
                        .HasColumnName("received_notification_id");

                    b.Property<int>("ReceivedUserId")
                        .HasColumnType("int")
                        .HasColumnName("received_user_id");

                    b.HasKey("ReceivedNotificationId", "ReceivedUserId");

                    b.HasIndex("ReceivedUserId");

                    b.ToTable("notification_received_users", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__orders__is_deleted");

                    b.HasIndex("PaidDateTime")
                        .HasDatabaseName("IX__orders__paid_datetime");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("SupplyItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyItemId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__order_photos__url");

                    b.ToTable("order_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__order_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("order_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_discontinued");

                    b.Property<bool>("IsForRetail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_for_retail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("StockingQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stocking_quantity");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("var_factor");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__products__name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__product_categories__name");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrent_stamp");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int")
                        .HasColumnName("power_level");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("UX__roles__display_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__roles__name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)")
                        .HasColumnName("row_version");

                    b.Property<long>("ShipmentFee")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_fee");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__supplies__is_deleted");

                    b.HasIndex("PaidDateTime")
                        .IsUnique()
                        .HasDatabaseName("UX__supply_paid_datetime");

                    b.ToTable("supplies", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SuppliedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("supplied_quantities");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyId");

                    b.ToTable("supply_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("supply_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__supply_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("supply_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("ServiceAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("service_amount");

                    b.Property<decimal>("ServiceVatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("service_vat_factor");

                    b.Property<int>("TherapistId")
                        .HasColumnType("int")
                        .HasColumnName("therapist_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX__treatments__is_deleted");

                    b.HasIndex("PaidDateTime")
                        .HasDatabaseName("IX__treatments__ordered_datetime");

                    b.HasIndex("TherapistId");

                    b.ToTable("treatments", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TreatmentId");

                    b.ToTable("treatment_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("treatment_photo_type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__treatment_photos__url");

                    b.ToTable("treatment_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentUpdateHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("UpdatedDateTime")
                        .HasDatabaseName("IX__treatment_update_histories__updated_datetime");

                    b.HasIndex("UserId");

                    b.ToTable("treatment_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrent_stamp");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_full_name");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UX__users__username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiringDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiring_datetime");

                    b.Property<DateTime>("IssuedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Announcement", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("CreatedAnnouncements")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__announcements__created_users__created_user_id");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.AnnouncementReadUser", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Announcement", "Announcement")
                        .WithMany()
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NATSInternal.Services.Entities.User", "ReadUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("ReadUser");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__brands__countries__country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Consultant", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("Consultants")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__consultants__users__user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Consultants")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__consultants__customers__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ConsultantUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Consultant", "Consultant")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__consultant_update_histories__consultants__consultant_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("ConsultantUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__consultant_update_histories__users__user_id");

                    b.Navigation("Consultant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("CreatedCustomers")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__users__created_user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Introducer")
                        .WithMany("IntroducedCustomers")
                        .HasForeignKey("IntroducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__customers__customers__introducer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Introducer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DailyStats", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.MonthlyStats", "Monthly")
                        .WithMany("DailyStats")
                        .HasForeignKey("MonthlyStatsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__daily_stats__monthly_stats__monthly_id");

                    b.Navigation("Monthly");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Debt", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("Debts")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debts__users__user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Debts")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debts__customers__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtPayment", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debt_payments__users__user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("DebtPayments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debt_payments__customers__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtPaymentUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.DebtPayment", "DebtPayment")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("DebtPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__debt_payment_update_histories__debt_payments__debt_payment_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("DebtPaymentUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debt_paymetn_update_histories__users__user_id");

                    b.Navigation("DebtPayment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Debt", "Debt")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("DebtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__debt_update_histories__debts__debt_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("DebtUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__debt_update_histories__users__user_id");

                    b.Navigation("Debt");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("Expenses")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__users__user_id");

                    b.HasOne("NATSInternal.Services.Entities.ExpensePayee", "Payee")
                        .WithMany("Expenses")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__expense_payees__payee_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Payee");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Expense", "Expense")
                        .WithMany("Photos")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__expense_photos__expenses__expense_id");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpenseUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Expense", "Expense")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__expense_update_histories__expenses__expense_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("ExpenseUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expense_update_histories__users__user_id");

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.NotificationReadUser", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Notification", "ReadNotification")
                        .WithMany()
                        .HasForeignKey("ReadNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notification_read_users__users__read_notification_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "ReadUser")
                        .WithMany()
                        .HasForeignKey("ReadUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notification_read_users__users__read_user_id");

                    b.Navigation("ReadNotification");

                    b.Navigation("ReadUser");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.NotificationReceivedUser", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Notification", "ReceivedNotification")
                        .WithMany()
                        .HasForeignKey("ReceivedNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notification_received_users__users__received_notification_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "ReceivedUser")
                        .WithMany()
                        .HasForeignKey("ReceivedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__notification_received_users__users__received_user_id");

                    b.Navigation("ReceivedNotification");

                    b.Navigation("ReceivedUser");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__orders__users__user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__orders__customers__customer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_items__orders__order_id");

                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__order_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.SupplyItem", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("SupplyItemId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("Photos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_photos__orders__order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_update_histories__orders__order_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("OrderUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__order_update_histories__users__user_id");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__products__brands__brand_id");

                    b.HasOne("NATSInternal.Services.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__products__product_categories__category_id");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__product_photos__products__product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("Supplies")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__supplies__users__user_id");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("SupplyItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("Items")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_items__supplies__supply_id");

                    b.Navigation("Product");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("Photos")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_photos__supplies__supply_id");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_update_histories__supplies__supply_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("SupplyUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__supply_update_histories__users__user_id");

                    b.Navigation("Supply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("CreatedTreatments")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__users__created_user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Treatments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__customers__customer_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "Therapist")
                        .WithMany("TreatmentsInCharge")
                        .HasForeignKey("TherapistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__users__therapist_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Customer");

                    b.Navigation("Therapist");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("TreatmentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("Items")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_items__treatments__treatment_id");

                    b.Navigation("Product");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("Photos")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_photos__treatments__treatment_id");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentUpdateHistory", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_update_histories__treatment__treatment_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("TreatmentUpdateHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_update_histories__users__user_id");

                    b.Navigation("Treatment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_refresh_tokens__users__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRole", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_roles__roles__role_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_roles__users__user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Consultant", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Country", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.Navigation("Consultants");

                    b.Navigation("DebtPayments");

                    b.Navigation("Debts");

                    b.Navigation("IntroducedCustomers");

                    b.Navigation("Orders");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Debt", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.DebtPayment", b =>
                {
                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePayee", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.MonthlyStats", b =>
                {
                    b.Navigation("DailyStats");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Photos");

                    b.Navigation("SupplyItems");

                    b.Navigation("TreatmentItems");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Role", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.User", b =>
                {
                    b.Navigation("ConsultantUpdateHistories");

                    b.Navigation("Consultants");

                    b.Navigation("CreatedAnnouncements");

                    b.Navigation("CreatedCustomers");

                    b.Navigation("CreatedTreatments");

                    b.Navigation("DebtPaymentUpdateHistories");

                    b.Navigation("DebtPayments");

                    b.Navigation("DebtUpdateHistories");

                    b.Navigation("Debts");

                    b.Navigation("ExpenseUpdateHistories");

                    b.Navigation("Expenses");

                    b.Navigation("OrderUpdateHistories");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Supplies");

                    b.Navigation("SupplyUpdateHistories");

                    b.Navigation("TreatmentUpdateHistories");

                    b.Navigation("TreatmentsInCharge");
                });
#pragma warning restore 612, 618
        }
    }
}
