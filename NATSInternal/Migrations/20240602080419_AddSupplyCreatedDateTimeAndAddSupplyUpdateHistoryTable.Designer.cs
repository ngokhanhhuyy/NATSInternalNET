// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NATSInternal.Services;

#nullable disable

namespace NATSInternal.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240602080419_AddSupplyCreatedDateTimeAndAddSupplyUpdateHistoryTable")]
    partial class AddSupplyCreatedDateTimeAndAddSupplyUpdateHistoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasColumnName("claim_value");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("login_providers");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("provider_key");

                    b.HasKey("UserId");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("int")
                        .HasColumnName("category");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("content");

                    b.Property<DateTime>("EndingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ending_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("starting_datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("title");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("announcements");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<string>("SocialMediaUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("social_media_url");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__brands__name");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)")
                        .HasColumnName("email");

                    b.Property<string>("FacebookUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("facebook_url");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("fullname");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<int?>("IntroducerId")
                        .HasColumnType("int")
                        .HasColumnName("introducer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NickName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)")
                        .HasColumnName("nickname");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_full_name");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("ZaloNumber")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("zalo_number");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("IntroducerId");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<int>("PayeeId")
                        .HasColumnType("int")
                        .HasColumnName("payee_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PayeeId");

                    b.HasIndex("UserId");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.ToTable("expense_categories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePayee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__expense_payees__name");

                    b.ToTable("expenses_payees", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int")
                        .HasColumnName("expense_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__expense_photos__url");

                    b.ToTable("expense_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("OrderedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ordered_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("ShipmentFee")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_fee");

                    b.Property<bool>("ShipmentFeeIncluded")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("shipment_fee_included");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("SupplyItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyItemId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("order_payments", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__order_photos__url");

                    b.ToTable("order_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int")
                        .HasColumnName("brand_id");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDiscontinued")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_discontinued");

                    b.Property<bool>("IsForRetail")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_for_retail");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("Price")
                        .HasColumnType("bigint")
                        .HasColumnName("price");

                    b.Property<int>("StockingQuantity")
                        .HasColumnType("int")
                        .HasColumnName("stocking_quantity");

                    b.Property<string>("ThumbnailUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("var_factor");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__products__name");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__product_categories__name");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("product_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrent_stamp");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_name");

                    b.Property<int>("PowerLevel")
                        .HasColumnType("int")
                        .HasColumnName("power_level");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName")
                        .IsUnique()
                        .HasDatabaseName("UX__roles__display_name");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("UX__roles__name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<long>("PaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_amount");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("ShipmentFee")
                        .HasColumnType("bigint")
                        .HasColumnName("shipment_fee");

                    b.Property<DateTime>("SuppliedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("supplied_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("supplies", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SuppliedQuantity")
                        .HasColumnType("int")
                        .HasColumnName("supplied_quantities");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplyId");

                    b.ToTable("supply_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("supply_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyUpdateHistories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NewData")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("new_data");

                    b.Property<string>("OldData")
                        .HasMaxLength(1000)
                        .HasColumnType("JSON")
                        .HasColumnName("old_data");

                    b.Property<string>("Reason")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("reason");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int")
                        .HasColumnName("supply_id");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.HasIndex("UserId");

                    b.ToTable("supply_update_histories", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("OrderedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ordered_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("UserId");

                    b.ToTable("treatments", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    b.Property<decimal>("VatFactor")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("vat_factor");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SessionId");

                    b.ToTable("treatment_items", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<long>("PaidAmount")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_amount");

                    b.Property<DateTime>("PaidDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("paid_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("UserId");

                    b.ToTable("treatment_payments", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("treatment_photo_type");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.HasIndex("Url")
                        .IsUnique()
                        .HasDatabaseName("UX__treatment_photos__url");

                    b.ToTable("treatment_photos", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("EndingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ending_datetime");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime>("StartingDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("starting_datetime");

                    b.Property<int>("TreatmentId")
                        .HasColumnType("int")
                        .HasColumnName("treatment_id");

                    b.HasKey("Id");

                    b.HasIndex("TreatmentId");

                    b.ToTable("treatment_sessions", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar_url");

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("concurrent_stamp");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_datetime");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("full_name");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<DateOnly?>("JoiningDate")
                        .HasColumnType("date")
                        .HasColumnName("joining_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedFirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_first_name");

                    b.Property<string>("NormalizedFullName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("normalized_full_name");

                    b.Property<string>("NormalizedLastName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("normalized_last_name");

                    b.Property<string>("NormalizedMiddleName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("normalized_middle_name");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("longtext")
                        .HasColumnName("normalized_username");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_datetime");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasDatabaseName("UX__users__username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpiringDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expiring_datetime");

                    b.Property<DateTime>("IssuedDateTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("issued_datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("TreatmentSessionUser", b =>
                {
                    b.Property<int>("TherapistsId")
                        .HasColumnType("int");

                    b.Property<int>("TreatmentSessionsId")
                        .HasColumnType("int");

                    b.HasKey("TherapistsId", "TreatmentSessionsId");

                    b.HasIndex("TreatmentSessionsId");

                    b.ToTable("treatment_session_therapists", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Role", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Announcement", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__announcements__users__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__brands__countries__country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "CreatedUser")
                        .WithMany("CreatedCustomers")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__customers__users__created_user_id");

                    b.HasOne("NATSInternal.Services.Entities.Customer", "Introducer")
                        .WithMany("IntroducedCustomers")
                        .HasForeignKey("IntroducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK__customers__customers__introducer_id");

                    b.Navigation("CreatedUser");

                    b.Navigation("Introducer");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__expenses__expense_categories__category_id");

                    b.HasOne("NATSInternal.Services.Entities.ExpensePayee", "Payee")
                        .WithMany("Expenses")
                        .HasForeignKey("PayeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__expense_payees__payee_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__expenses__users__user_id");

                    b.Navigation("Category");

                    b.Navigation("Payee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Expense", "Expense")
                        .WithMany("Photos")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__expense_photos__expenses__expense_id");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__orders__customers__customer_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__orders__users__user_id");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_items__orders__order_id");

                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__order_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.SupplyItem", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("SupplyItemId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPayment", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_payments__orders__order_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("OrderPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_payments__users__user_id");

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.OrderPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Order", "Order")
                        .WithMany("Photos")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__order_photos__orders__order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__products__brands__brand_id");

                    b.HasOne("NATSInternal.Services.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__products__product_categories__category_id");

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__product_photos__products__product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("Supplies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__supplies__users__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("SupplyItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("Items")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_items__supplies__supply_id");

                    b.Navigation("Product");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("Photos")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_photos__supplies__supply_id");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyUpdateHistories", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Supply", "Supply")
                        .WithMany("UpdateHistories")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__supply_update_histories__supplies__supply_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supply");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Customer", "Customer")
                        .WithMany("Treatments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__customers__customer_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("Treatments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatments__users__user_id");

                    b.Navigation("Customer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentItem", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Product", "Product")
                        .WithMany("TreatmentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_items__products__product_id");

                    b.HasOne("NATSInternal.Services.Entities.TreatmentSession", "Session")
                        .WithMany("Items")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_items__treatment_sessions__session_id");

                    b.Navigation("Product");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPayment", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("Payments")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_payments__treatments__treatment_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("TreatmentPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_payments__users__user_id");

                    b.Navigation("Treatment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentPhoto", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("Photos")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_photos__treatments__treatment_id");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentSession", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Treatment", "Treatment")
                        .WithMany("Sessions")
                        .HasForeignKey("TreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__treatment_sessions__treatments__treatment_id");

                    b.Navigation("Treatment");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_refresh_tokens__users__user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.UserRole", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_roles__roles__role_id");

                    b.HasOne("NATSInternal.Services.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__user_roles__users__user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TreatmentSessionUser", b =>
                {
                    b.HasOne("NATSInternal.Services.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("TherapistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NATSInternal.Services.Entities.TreatmentSession", null)
                        .WithMany()
                        .HasForeignKey("TreatmentSessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Country", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Customer", b =>
                {
                    b.Navigation("IntroducedCustomers");

                    b.Navigation("Orders");

                    b.Navigation("Treatments");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Expense", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ExpensePayee", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Payments");

                    b.Navigation("Photos");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Photos");

                    b.Navigation("SupplyItems");

                    b.Navigation("TreatmentItems");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Role", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Supply", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Photos");

                    b.Navigation("UpdateHistories");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.SupplyItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.Treatment", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Photos");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.TreatmentSession", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("NATSInternal.Services.Entities.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("CreatedCustomers");

                    b.Navigation("Expenses");

                    b.Navigation("OrderPayments");

                    b.Navigation("Orders");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Supplies");

                    b.Navigation("TreatmentPayments");

                    b.Navigation("Treatments");
                });
#pragma warning restore 612, 618
        }
    }
}
